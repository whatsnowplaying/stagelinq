[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "python-stagelinq"
version = "0.1.0"
description = "Python implementation of Denon's StageLinq protocol"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "StageLinq Python Port"},
]
maintainers = [
    {name = "StageLinq Python Port"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "netifaces-plus>=0.2.0",
    "aiofiles>=23.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "pyright>=1.1.300",
    "scapy",
]

[project.urls]
Homepage = "https://github.com/your-username/python-stagelinq"
Repository = "https://github.com/your-username/python-stagelinq"
Issues = "https://github.com/your-username/python-stagelinq/issues"
Documentation = "https://github.com/your-username/python-stagelinq#readme"

[project.scripts]
stagelinq-discover = "stagelinq.examples.discover_devices:main"
stagelinq-beatinfo = "stagelinq.examples.beat_info:main"

[tool.hatch.version]
path = "stagelinq/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/stagelinq",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["stagelinq"]


[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)` - keep tuple syntax for isinstance
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = [
    "F401",  # Unused imports (common in tests for setup)
    "F841",  # Unused variables (test data, fixtures)
    "B007",  # Unused loop control variables (common in test loops)
]

[tool.pyright]
pythonVersion = "3.10"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
# Disable some of the stricter checks for now
reportUnknownParameterType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportMissingParameterType = false
reportGeneralTypeIssues = false
reportAttributeAccessIssue = false
reportArgumentType = false
reportAssignmentType = false
include = ["stagelinq"]
exclude = ["tests", "tools"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=stagelinq",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
relative_files = true
source = ["stagelinq"]
omit = [
    "*/tests/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = [
    "B104",  # hardcoded_bind_all_interfaces - intentional for network discovery
    "B112",  # try_except_continue - used appropriately in network interface enumeration
]
